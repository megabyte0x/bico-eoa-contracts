//load 'ethers' and 'fs'
const ethers = require('ethers');
    
//Read bin and abi file to object; names of the solcjs-generated files renamed
bytecode = "60806040523480156200001157600080fd5b5060405162000cb338038062000cb38339818101604052810190620000379190620001e7565b620000476200009f60201b60201c565b600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200009881620000e160201b60201c565b5062000219565b60006014600036905010158015620000c45750620000c3336200012460201b60201c565b5b15620000da57601436033560601c9050620000de565b3390505b90565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001af8262000182565b9050919050565b620001c181620001a2565b8114620001cd57600080fd5b50565b600081519050620001e181620001b6565b92915050565b6000602082840312156200020057620001ff6200017d565b5b60006200021084828501620001d0565b91505092915050565b610a8a80620002296000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063999b93af1161005b578063999b93af146100ef578063ce1b815f1461010d578063e3de17031461012b578063f851a440146101475761007d565b8063171755b114610082578063572b6c05146100a15780638da5cb5b146100d1575b600080fd5b61008a610165565b6040516100989291906104de565b60405180910390f35b6100bb60048036038101906100b6919061054e565b61021f565b6040516100c89190610596565b60405180910390f35b6100d9610278565b6040516100e691906105b1565b60405180910390f35b6100f761029e565b60405161010491906105cc565b60405180910390f35b61011561032c565b60405161012291906105b1565b60405180910390f35b61014560048036038101906101409190610723565b610355565b005b61014f6103b0565b60405161015c91906105b1565b60405180910390f35b60606000600280546101769061079b565b80601f01602080910402602001604051908101604052809291908181526020018280546101a29061079b565b80156101ef5780601f106101c4576101008083540402835291602001916101ef565b820191906000526020600020905b8154815290600101906020018083116101d257829003601f168201915b50505050509150600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509091565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600280546102ab9061079b565b80601f01602080910402602001604051908101604052809291908181526020018280546102d79061079b565b80156103245780601f106102f957610100808354040283529160200191610324565b820191906000526020600020905b81548152906001019060200180831161030757829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b80600290816103649190610982565b5061036d6103d6565b600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060146000369050101580156103f257506103f13361021f565b5b1561040657601436033560601c905061040a565b3390505b90565b600081519050919050565b600082825260208201905092915050565b60005b8381101561044757808201518184015260208101905061042c565b60008484015250505050565b6000601f19601f8301169050919050565b600061046f8261040d565b6104798185610418565b9350610489818560208601610429565b61049281610453565b840191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104c88261049d565b9050919050565b6104d8816104bd565b82525050565b600060408201905081810360008301526104f88185610464565b905061050760208301846104cf565b9392505050565b6000604051905090565b600080fd5b600080fd5b61052b816104bd565b811461053657600080fd5b50565b60008135905061054881610522565b92915050565b60006020828403121561056457610563610518565b5b600061057284828501610539565b91505092915050565b60008115159050919050565b6105908161057b565b82525050565b60006020820190506105ab6000830184610587565b92915050565b60006020820190506105c660008301846104cf565b92915050565b600060208201905081810360008301526105e68184610464565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61063082610453565b810181811067ffffffffffffffff8211171561064f5761064e6105f8565b5b80604052505050565b600061066261050e565b905061066e8282610627565b919050565b600067ffffffffffffffff82111561068e5761068d6105f8565b5b61069782610453565b9050602081019050919050565b82818337600083830152505050565b60006106c66106c184610673565b610658565b9050828152602081018484840111156106e2576106e16105f3565b5b6106ed8482856106a4565b509392505050565b600082601f83011261070a576107096105ee565b5b813561071a8482602086016106b3565b91505092915050565b60006020828403121561073957610738610518565b5b600082013567ffffffffffffffff8111156107575761075661051d565b5b610763848285016106f5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107b357607f821691505b6020821081036107c6576107c561076c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261082e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826107f1565b61083886836107f1565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061087f61087a61087584610850565b61085a565b610850565b9050919050565b6000819050919050565b61089983610864565b6108ad6108a582610886565b8484546107fe565b825550505050565b600090565b6108c26108b5565b6108cd818484610890565b505050565b5b818110156108f1576108e66000826108ba565b6001810190506108d3565b5050565b601f82111561093657610907816107cc565b610910846107e1565b8101602085101561091f578190505b61093361092b856107e1565b8301826108d2565b50505b505050565b600082821c905092915050565b60006109596000198460080261093b565b1980831691505092915050565b60006109728383610948565b9150826002028217905092915050565b61098b8261040d565b67ffffffffffffffff8111156109a4576109a36105f8565b5b6109ae825461079b565b6109b98282856108f5565b600060209050601f8311600181146109ec57600084156109da578287015190505b6109e48582610966565b865550610a4c565b601f1984166109fa866107cc565b60005b82811015610a22578489015182556001820191506020850194506020810190506109fd565b86831015610a3f5784890151610a3b601f891682610948565b8355505b6001600288020188555050505b50505050505056fea26469706673582212201f6190d4e21d4628b2dc95151d8a0e5430c9260f582a3b26bbac63039070cefd64736f6c63430008120033";
abi = [
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "trustedForwarder",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "admin",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getQuote",
		"outputs": [
			{
				"internalType": "string",
				"name": "currentQuote",
				"type": "string"
			},
			{
				"internalType": "address",
				"name": "currentOwner",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getTrustedForwarder",
		"outputs": [
			{
				"internalType": "address",
				"name": "forwarder",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "forwarder",
				"type": "address"
			}
		],
		"name": "isTrustedForwarder",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "quote",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "newQuote",
				"type": "string"
			}
		],
		"name": "setQuote",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
];
  
//to create 'signer' object;here 'account'
// const mnemonic = "<see-phrase>" // seed phrase for your Metamask account
const provider = new ethers.providers.JsonRpcProvider("https://rpc.testnet.mantle.xyz");
// const wallet = ethers.Wallet.fromMnemonic(mnemonic);
const account = new ethers.Wallet("<PRIVATE_KEY>", provider);;
  
const myContract = new ethers.ContractFactory(abi, bytecode, account);
  
//Ussing async-await for deploy method
async function main() {
  // If your contract requires constructor args, you can specify them here
  const contract = await myContract.deploy(
    "0xbE42ce01a127E501d6173f5bc21FF545f15bDdD8"
  );
  
  console.log("2771-TestContract: ", contract.address);
}
    
main();